SOLUTION: Secure YouTube Video Integration for Aurora Learning Platform


PROBLEM ANALYSIS:
- Need to embed YouTube videos (unlisted) without sharing/download capabilities
- Remove YouTube branding and interface elements
- Maintain video security within LMS context
- Working with Appwrite student limitations


IMPLEMENTATION APPROACH:


=== STEP 1: YouTube API Setup ===


1. Enable YouTube Data API v3 in Google Cloud Console
2. Create API credentials (API Key)
3. Add to environment variables:
   ```
   NEXT_PUBLIC_YOUTUBE_API_KEY=your_youtube_api_key_here
   ```


=== STEP 2: Custom Video Player Component ===


CREATE FILE: src/components/features/SecureVideoPlayer.js


```javascript
import React, { useRef, useEffect, useState } from 'react';
import { useVideoContext } from '../../contexts/VideoContext';


const SecureVideoPlayer = ({ videoId, courseId, lessonId }) => {
  const playerRef = useRef(null);
  const [player, setPlayer] = useState(null);
  const [isPlayerReady, setIsPlayerReady] = useState(false);
  const { updateWatchTime } = useVideoContext();


  useEffect(() => {
    // Load YouTube IFrame API
    if (!window.YT) {
      const tag = document.createElement('script');
      tag.src = 'https://www.youtube.com/iframe_api';
      const firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    }


    window.onYouTubeIframeAPIReady = initializePlayer;


    if (window.YT && window.YT.Player) {
      initializePlayer();
    }


    return () => {
      if (player) {
        player.destroy();
      }
    };
  }, [videoId]);


  const initializePlayer = () => {
    const newPlayer = new window.YT.Player(playerRef.current, {
      height: '100%',
      width: '100%',
      videoId: videoId,
      playerVars: {
        autoplay: 0,
        controls: 1,
        disablekb: 1,        // Disable keyboard shortcuts
        fs: 0,               // Disable fullscreen
        iv_load_policy: 3,   // Disable annotations
        modestbranding: 1,   // Minimize YouTube branding
        rel: 0,              // Don't show related videos
        showinfo: 0,         // Hide video title
        cc_load_policy: 0,   // Disable captions by default
        hl: 'en',
        origin: window.location.origin
      },
      events: {
        onReady: onPlayerReady,
        onStateChange: onPlayerStateChange,
        onError: onPlayerError
      }
    });
    setPlayer(newPlayer);
  };


  const onPlayerReady = (event) => {
    setIsPlayerReady(true);
    // Additional security: Hide download button via CSS
    hideDownloadButton();
  };


  const onPlayerStateChange = (event) => {
    // Track watch time for progress
    if (event.data === window.YT.PlayerState.PLAYING) {
      startWatchTimeTracking();
    } else if (event.data === window.YT.PlayerState.PAUSED) {
      stopWatchTimeTracking();
    }
  };


  const onPlayerError = (event) => {
    console.error('YouTube Player Error:', event.data);
  };


  const hideDownloadButton = () => {
    const style = document.createElement('style');
    style.textContent = `
      .ytp-button[data-tooltip-target-id="ytp-watch-later-button"],
      .ytp-button[data-tooltip-target-id="ytp-share-button"],
      .ytp-watch-later-button,
      .ytp-share-button,
      .ytp-copylink-button {
        display: none !important;
      }
      .ytp-chrome-top {
        display: none !important;
      }
      .ytp-show-cards-title {
        display: none !important;
      }
    `;
    document.head.appendChild(style);
  };


  let watchTimeInterval;
  const startWatchTimeTracking = () => {
    watchTimeInterval = setInterval(() => {
      if (player && typeof player.getCurrentTime === 'function') {
        const currentTime = player.getCurrentTime();
        updateWatchTime(courseId, lessonId, Math.floor(currentTime));
      }
    }, 5000); // Update every 5 seconds
  };


  const stopWatchTimeTracking = () => {
    if (watchTimeInterval) {
      clearInterval(watchTimeInterval);
    }
  };


  return (
    <div className="relative w-full" style={{ paddingBottom: '56.25%', height: 0 }}>
      <div 
        ref={playerRef}
        className="absolute top-0 left-0 w-full h-full rounded-lg overflow-hidden"
        style={{ pointerEvents: 'auto' }}
      />
      {/* Overlay to prevent right-click context menu */}
      <div 
        className="absolute inset-0 pointer-events-none"
        onContextMenu={(e) => e.preventDefault()}
        style={{ zIndex: 1 }}
      />
    </div>
  );
};


export default SecureVideoPlayer;
```


=== STEP 3: Video Security Middleware ===


CREATE FILE: src/lib/videoSecurity.js


```javascript
import { databases } from './appwrite';


export const validateVideoAccess = async (userId, courseId, lessonId) => {
  try {
    // Check if user is enrolled in course
    const enrollments = await databases.listDocuments(
      process.env.NEXT_PUBLIC_APPWRITE_DATABASE_MAIN_ID,
      process.env.NEXT_PUBLIC_APPWRITE_COLLECTION_ENROLLMENTS_ID,
      [
        Query.equal('userId', userId),
        Query.equal('courseId', courseId),
        Query.equal('status', 'active')
      ]
    );


    return enrollments.documents.length > 0;
  } catch (error) {
    console.error('Video access validation error:', error);
    return false;
  }
};


export const generateSecureVideoUrl = (videoId, userId, courseId) => {
  // Generate a temporary access token (optional)
  const timestamp = Date.now();
  const signature = btoa(`${userId}-${courseId}-${timestamp}`);
  
  return {
    videoId,
    accessToken: signature,
    timestamp
  };
};


export const logVideoAccess = async (userId, courseId, lessonId, action) => {
  try {
    await databases.createDocument(
      process.env.NEXT_PUBLIC_APPWRITE_DATABASE_MAIN_ID,
      'video_access_logs', // Create this collection in Appwrite
      'unique()',
      {
        userId,
        courseId,
        lessonId,
        action, // 'play', 'pause', 'complete'
        timestamp: new Date().toISOString(),
        ipAddress: 'client-side' // Limited on client-side
      }
    );
  } catch (error) {
    console.error('Video access logging error:', error);
  }
};
```


=== STEP 4: Enhanced Video Context ===


UPDATE FILE: src/contexts/VideoContext.js


```javascript
import React, { createContext, useContext, useState, useEffect } from 'react';
import { validateVideoAccess, logVideoAccess } from '../lib/videoSecurity';
import { useAuth } from './AuthContext';


const VideoContext = createContext();


export const VideoProvider = ({ children }) => {
  const { user } = useAuth();
  const [currentVideo, setCurrentVideo] = useState(null);
  const [watchTime, setWatchTime] = useState({});
  const [videoAccess, setVideoAccess] = useState({});


  const checkVideoAccess = async (courseId, lessonId) => {
    if (!user) return false;
    
    const accessKey = `${courseId}-${lessonId}`;
    if (videoAccess[accessKey] !== undefined) {
      return videoAccess[accessKey];
    }


    const hasAccess = await validateVideoAccess(user.$id, courseId, lessonId);
    setVideoAccess(prev => ({ ...prev, [accessKey]: hasAccess }));
    
    return hasAccess;
  };


  const updateWatchTime = async (courseId, lessonId, time) => {
    const key = `${courseId}-${lessonId}`;
    setWatchTime(prev => ({ ...prev, [key]: time }));
    
    // Log video progress
    await logVideoAccess(user?.$id, courseId, lessonId, 'progress');
  };


  const playVideo = async (videoData) => {
    const { courseId, lessonId } = videoData;
    const hasAccess = await checkVideoAccess(courseId, lessonId);
    
    if (!hasAccess) {
      throw new Error('Access denied to this video');
    }


    setCurrentVideo(videoData);
    await logVideoAccess(user?.$id, courseId, lessonId, 'play');
  };


  return (
    <VideoContext.Provider value={{
      currentVideo,
      watchTime,
      checkVideoAccess,
      updateWatchTime,
      playVideo
    }}>
      {children}
    </VideoContext.Provider>
  );
};


export const useVideoContext = () => {
  const context = useContext(VideoContext);
  if (!context) {
    throw new Error('useVideoContext must be used within VideoProvider');
  }
  return context;
};
```


=== STEP 5: Lesson Page Integration ===


UPDATE FILE: src/app/courses/[courseId]/lessons/[lessonId]/page.js


```javascript
'use client';


import React, { useState, useEffect } from 'react';
import { useParams } from 'next/navigation';
import { useAuth } from '../../../../../contexts/AuthContext';
import { useVideoContext } from '../../../../../contexts/VideoContext';
import SecureVideoPlayer from '../../../../../components/features/SecureVideoPlayer';
import { databases } from '../../../../../lib/appwrite';


export default function LessonPage() {
  const { courseId, lessonId } = useParams();
  const { user } = useAuth();
  const { checkVideoAccess, playVideo } = useVideoContext();
  const [lesson, setLesson] = useState(null);
  const [hasAccess, setHasAccess] = useState(false);
  const [loading, setLoading] = useState(true);


  useEffect(() => {
    if (user && courseId && lessonId) {
      loadLesson();
    }
  }, [user, courseId, lessonId]);


  const loadLesson = async () => {
    try {
      // Check access first
      const access = await checkVideoAccess(courseId, lessonId);
      setHasAccess(access);


      if (!access) {
        setLoading(false);
        return;
      }


      // Load lesson data
      const lessonDoc = await databases.getDocument(
        process.env.NEXT_PUBLIC_APPWRITE_DATABASE_MAIN_ID,
        process.env.NEXT_PUBLIC_APPWRITE_COLLECTION_LESSONS_ID,
        lessonId
      );


      setLesson(lessonDoc);
      
      // Initialize video
      if (lessonDoc.videoId) {
        await playVideo({
          videoId: lessonDoc.videoId,
          courseId,
          lessonId,
          title: lessonDoc.title
        });
      }
    } catch (error) {
      console.error('Error loading lesson:', error);
    } finally {
      setLoading(false);
    }
  };


  if (loading) {
    return <div className="flex justify-center items-center h-64">Loading...</div>;
  }


  if (!hasAccess) {
    return (
      <div className="text-center py-8">
        <h2 className="text-2xl font-bold text-red-600">Access Denied</h2>
        <p className="mt-4">You need to enroll in this course to view this lesson.</p>
      </div>
    );
  }


  return (
    <div className="max-w-4xl mx-auto p-6">
      <div className="bg-white rounded-lg shadow-lg overflow-hidden">
        <div className="aspect-video bg-black">
          {lesson?.videoId && (
            <SecureVideoPlayer
              videoId={lesson.videoId}
              courseId={courseId}
              lessonId={lessonId}
            />
          )}
        </div>
        
        <div className="p-6">
          <h1 className="text-3xl font-bold mb-4">{lesson?.title}</h1>
          <div className="prose max-w-none">
            <p>{lesson?.description}</p>
          </div>
        </div>
      </div>
    </div>
  );
}
```


=== STEP 6: Additional Security CSS ===


CREATE FILE: src/styles/video-security.css


```css
/* Hide YouTube branding and controls that allow sharing */
.ytp-button[data-tooltip-target-id="ytp-share-button"],
.ytp-button[data-tooltip-target-id="ytp-watch-later-button"],
.ytp-share-button,
.ytp-watch-later-button,
.ytp-copylink-button,
.ytp-cards-button,
.ytp-endscreen-content {
  display: none !important;
}


/* Hide YouTube logo */
.ytp-youtube-button {
  display: none !important;
}


/* Prevent text selection on video container */
.video-container {
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}


/* Disable right-click context menu */
.video-container * {
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}


/* Additional security styling */
iframe[src*="youtube"] {
  pointer-events: auto;
  border: none;
}
```


=== STEP 7: Environment Variables Update ===


ADD TO .env.local:
```
NEXT_PUBLIC_YOUTUBE_API_KEY=your_youtube_api_key
NEXT_PUBLIC_YOUTUBE_CHANNEL_ID=your_channel_id
```


=== STEP 8: Appwrite Collections Setup ===


CREATE COLLECTION: video_access_logs
Fields:
- userId (string)
- courseId (string) 
- lessonId (string)
- action (string)
- timestamp (datetime)
- ipAddress (string)


Permissions:
- Create: Users
- Read: Users (own documents only)


=== STEP 9: Implementation Steps ===


1. Set up YouTube Data API in Google Cloud Console
2. Create the SecureVideoPlayer component
3. Implement video security middleware
4. Update VideoContext with access controls
5. Modify lesson pages to use secure player
6. Add security CSS styles
7. Configure environment variables
8. Set up Appwrite collections for logging
9. Test video access control
10. Deploy and verify security measures


=== SECURITY FEATURES IMPLEMENTED ===


✓ No YouTube interface branding
✓ Disabled sharing buttons
✓ Disabled download options
✓ Access control based on enrollment
✓ Video progress tracking
✓ Right-click protection
✓ Keyboard shortcuts disabled
✓ Fullscreen disabled
✓ Related videos hidden
✓ Access logging for monitoring


NOTES:
- Videos should be uploaded as "Unlisted" on YouTube
- This solution provides reasonable protection but determined users can still access video URLs
- For maximum security, consider using a dedicated video hosting service like Vimeo Pro or Wistia
- The YouTube Player API has limitations on completely hiding all YouTube elements
- Monitor access logs regularly for suspicious activity